 * Ethereum introduction:
- Ethereum is a decentralized, open-source blockchain platform that runs smart contracts: applications that run exactly as programmed without any possibility of downtime, censorship, fraud or third-party interference. These applications are run on a custom-built blockchain, which is a decentralized database that runs on a network of computers. Ethereum is the second-largest blockchain platform by market capitalization, after Bitcoin. It was developed by Vitalik Buterin in 2013 and has since become a popular platform for creating and running decentralized applications.

Smart contracts:
- Smart contracts are self-executing contracts with the terms of the agreement between buyer and seller being directly written into lines of code. The code and the agreements contained therein exist across a distributed, decentralized blockchain network. Smart contracts allow for the automation of digital contracts and have the potential to revolutionize the way that transactions are executed and recorded, enabling new forms of economic activity and improving the efficiency and security of existing systems.

* Blockchain Layers:
* Layer 0:
- It’s the underlying infrastructure layer that forms the basic blockchain network consisting of distributed nodes forming the peer-to-peer architecture. Layer 0 enables interoperability (cross-chain communication), blockchain protocols that are built on the same layer 0 can easily transfer tokens and data.

    Example : PolkaDot, Avalanche, Cosmos

* L1 blockchains:
- L1 blockchains, also known as "layer 1" blockchains, are the foundational layer of a blockchain platform. They are the underlying infrastructure that supports the platform and enables it to function. L1 blockchains typically consist of a network of nodes that maintain a shared, decentralized ledger of transactions and a consensus mechanism to ensure the integrity and security of the ledger. L1 blockchains are often the first layer of a multi-layer blockchain platform, with additional layers built on top to provide additional features and functionality. Examples of L1 blockchains include the Bitcoin and Ethereum networks.

- Prominent blockchains like Bitcoin. Ethereum, Solana, Near, etc are the layer 1 chains. These are the execution protocols that provide the environment for transactions, handling cryptographic algorithms, data, consensus and tokenomics. Native tokens of the chain are the medium to interact with smart contracts, access resources, and mint NFT.

As I mentioned earlier, some examples of L1 blockchains include the Bitcoin and Ethereum networks. Both of these networks are decentralized, open-source platforms that run on a network of nodes and use a consensus mechanism to maintain a shared ledger of transactions. Other examples of L1 blockchains include Litecoin, which is based on the Bitcoin network and provides faster transaction processing times, and Ripple, which is a payment network for financial institutions. These are just a few examples of L1 blockchains; there are many others that are in use today.

        - Example : Solana, Ethereum, Bitcoin, Tezos, Near

* L2 blockchain:
- An L2 blockchain, or "layer 2 blockchain," is a blockchain that is built on top of another blockchain, known as the "layer 1" or "base" blockchain. L2 blockchains are designed to improve the scalability, performance, and security of the underlying blockchain by offloading some of the workload to the L2 blockchain. This can help to reduce transaction fees, increase transaction throughput, and improve the user experience. Some examples of L2 blockchains include the Lightning Network on top of the Bitcoin blockchain, and the Plasma framework on top of the Ethereum blockchain.

- Built on top of layer 1 chains, L2 solves the scalability problem of the blockchain trilemma by improvising on transaction speed (faster finality) & throughputs (higher transactions per second). Layer 1 handles security, data & consensus while Layer 2 handles transactions and regularly communicates with layer1. It takes away the transaction burden from layer 1 while taking the advantages of layer1’s security and decentralization.
        - Example : Polygon Matic L2 on Ethereum

* Layer 3:
- This is the utility layer where all the decentralized applications are built like DeFi, games & wallets. It gives abstraction where the user is only



* Sharding:
- Sharding is a technique used to improve the scalability and performance of a blockchain. In a sharded blockchain, the network is divided into multiple "shards," or partitions, where each shard processes a subset of the transactions and maintains its own portion of the ledger. This allows the network to process multiple transactions in parallel, which can increase the overall transaction throughput and reduce transaction fees.

Here is an example of the steps to build a blockchain with sharding:

1. Determine the number of shards and the shard size. The number of shards should be determined based on the desired level of scalability and performance, while the shard size should be determined based on the desired level of decentralization and security.

2. Implement the sharding mechanism. This involves designing and implementing the algorithms and data structures for dividing the network into shards, assigning transactions to shards, and maintaining the consistency and integrity of the ledger across all shards.

3. Implement the consensus mechanism. In a sharded blockchain, the consensus mechanism must be designed to ensure that the transactions within each shard are processed and validated in a decentralized and secure manner, and that the ledgers across all shards remain consistent.

4. Implement the transaction processing and validation logic. This involves designing and implementing the algorithms and data structures for processing and validating transactions within each shard, as well as the mechanisms for communicating and coordinating with other shards.

5. Implement the APIs and interfaces for interacting with the blockchain. This includes designing and implementing the APIs and interfaces for submitting transactions, querying the ledger, and accessing the data and functionality of the blockchain.

* Consensus mechanism:
- A consensus mechanism is a algorithm or protocol used by nodes in a distributed system to reach agreement on the state of the system. In a blockchain, the consensus mechanism is used to determine which transactions will be included in the next block of the ledger and to prevent conflicting transactions from being included.

- Basically that’s how a consensus protocol works in blockchain. Different blockchain’s have different consensus protocol

1. Proof Of Work (PoW):
Yes, it means what it sounds like, showing the proof that you have done the work. As we know mining is basically solving a complex mathematical problem that requires high computational power. At a time when many miners compete to mine a block, the node that wins the race has a proof of work of spending energy and resources and hence it’s rewarded when the block is verified and added to the chain. If the node tries to perform malicious activity, the block will not be verified by other nodes in the network and the miner doesn’t get the reward, which is a total waste of its resources and time. Bitcoin works on PoW, while Ethereum is on its way to Proof of Stake. Proof Of Work requires a lot of power as many miners try to compete to mine a block, Proof Of Stake is a better alternative.

2. Proof of Stake (PoS):
In Proof of Stake, instead of miners competing in a race to mine a block, they are asked to stake (deposit) some minimum tokens of that blockchain to become validators (Miners in PoS are called as Validators). The validators are chosen randomly taking into consideration how many tokens they have staked or for how long they have been staking. If a validator performs any malicious activity he’s penalized from the stake. It is a more energy efficient protocol as not all the validators compete against each other which lowers transaction cost and increases throughput. This is one of the primary reasons for Ethereum to migrate to PoS.

3. Proof of History (PoH):
Proof of History is an extension of proof of Stake, developed by Solana. And it’s one of the primary reasons why Solana is very fast, having the block time of 400 millisecond compared to Ethereum (1Sec) & BTC (10Mins). PoH introduces a variable of time in the block, it’s showing the proof that a historical event had occurred. In other consensus protocols the validators need to talk to each other to agree on when a block was added and how much time has passed. Whereas in Solana it has its own clock coded in a SHA256 algorithm, the validators keep mining blocks and they are sequentially added to the chain.

* Create ERC Token: 

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.13;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.0.0/contracts/token/ERC20/ERC20.sol";

  contract MyToken is ERC20 {
    constructor(string memory name, string memory symbol) ERC20(name, symbol) {

    // This mints 100 tokens to msg.sender (YOU). Just like how 1 dollar is 100 ccents, a token will have  1 * (10 ** decimals) decimals
    _mint(msg.sender, 100 * 10**uint(decimals()));

    }
}


What is a token?

* While often misunderstood, a blockchain token is a powerful tool. A blockchain token can represent almost anything that we want to assign a value to. This representation includes whether the thing is virtual or a real-world, tangible object.

* A token can grant special platform permissions to a user, grant exclusive access to a service, or represent ownership. A token also can represent cryptocurrencies that have monetary value. Let's dive into the history of tokens and explore various use cases. We'll demonstrate exactly what a token is and what you can do with it.

* Tokens - Different from Ether. Tokens are a cryptocurrency that’s built on the Ethereum platform.

* Ether - The native currency of Ethereum use to power smart contracts

* DApps created on the Ethereum platform are powered their own tokens. Why not just use ether? Using tokens to execute certain functions in the smart contract of the DAPPS makes the process simpler and more seamless.

* Tokens are simply digital assets that are built on top of the Ethereum blockchain, so developers do not have to go and create their own blockchain. Using tokens instead of straight ether also strengthens the Ethereum ecosystem by driving demand for ether.

Two categories of blockchain tokens:-
Different kinds of tokens are available in blockchain, but they're usually in one of two categories:

Fungible. Fungible tokens are:
   * Equivalent
   * Exchangeable
   * Valued by how many you have
Non-fungible. Non-fungible tokens are:
   * Unique
   * Distinct
   * Valued by which ones you have

----------------------
POW (Proof of Work):->
----------------------

* Each Blocksize: 1 MB, after forking: 4 MB

* 2700 transactions in a block result in 4 or 5 transactions per second after 10 minutes (7–19 minutes, i.e., an average of 10 minutes).

* Transactions in the mempool can be held for up to 14 days.The Higher transaction fees replaces the lower transaction fees to other mempool. After that, it'll be deleted from the mempool, and you'll have to resend the transaction.

* After the transaction is added to the blockchain,it wait for another 6 blocks to be added in the same block chain in order to make it irreversible transaction.

* Every two weeks, the bitcoin blockchain checks the average time for the last two weeks. Based on this, the diff level was adjusted to make the average mining time per block 10 minutes.

* 10 minutes = 2 weeks = 2016 mined blocks. The difference was adjusted after the 2016 block (after 2 weeks).

* After 210000 blocks, or 4 years, coinbase rewards get divided by 2. [50 btc => 25 => 12.5 => 6.26 as of now](This is called halving.). 4 year halving cycle.

* Since miners get fewer rewards, the price of bitcoin will increase. Miners control the circulation of bitcoin price.They'll sell the bitcoin at a higher price to get the benefit.

* Reward : Coinbase/Mining Reward (6.25 BTC) + Transaction Fee (1-2 lakh)

* We get bitcoin cash after forking the blockchain to a 4MB size from a 1MB size.

* Bitcoin works with the longest chain.

* wallet = public key + private key.

* Hierarchical deterministic wallet: HD wallet (different keys for each transaction)

* Hash (public key) = Bitcoin address [Bitcoin protocol rule : git]

* Miners will receive the rewards, but they will not be usable until the next 100 blocks are created, which will be around 16 or 17 hours.(coinbase maturity)

* Transaction hash: find the hash of each transaction, then apply the merle tree to find the final transaction hash. The following formula will be used to calculate the block hash: block no + nonce + transaction hash + timestamp.

* CPU: Mega Hash/Sec vs. GPU : Giga Hash/Sec vs. ASIC (application specific integrated circuit): Terra Hash/Sec

* Drawbacks of POW: (1 blockchain i.e no Sharding)

    * Too much energy consumption: Bitcoin annual mining = Argentina's electricity

    * Network Congestion (NC): dynamic gas price, i.e., Gwei. NC is high => Gwei high and alternate. Transactions in Dapps with high NC take longer to add to the blockchain.Block confirmation takes time. Blockchain adoption leads to increased network congestion.


----------------------
POS (Proof of Stake):-
----------------------

* Ethereum 2.0: POS (Beacon Chain): POS based Ethereum blockchain (Serenity):

    * POS consensus

    * Shard Chains

* There are no miners in POS. Validators, rather than miners, should be used at the POS. required 32 ETH to be a validator network. There are liquidity pools, or staking pools, in which groups of people invest money until they reach 32 ETH, etc., and become validators. For a limited time, 32 ETH will be locked, and the blockchain software will act as a validator. Dapps can be liquidity pools.

* POS:-
--------

    * 32 ETH are staked or locked in the Ethereum software. (Geth : GO implementation of the ETH, store private/public key.)

    * These three types of software must be installed. (Part of GETH): (POS architecture)

            * Execution client

            * Consensus client (consensus: voting  and reaching agreement)

            * Validator Client
                * Once 32 ETH are deposited (blockchain software will be activated), a validator joins a queue where others are waiting to be validators.

    * Adding new blocks in POS:

        * How blocks added in POS: 

            * Beacon chains have slots and epochs.

                * There is a data structure that has 32 partitions. Each partition is called a slot. The combination of 32 slots is called an "epoch."

                * Every slot can accept transactions. They are representations of proposed blocks. Slots are the intermediate state of a block.

                * When the validator wants to add a block to the Ethereum blockchain, he'll try to propose a transaction in any of the slots. People / validators are randomly chosen to add these blocks.

                * The person with the best hardware mines the transaction in POW. But in POS, people are randomly chosen. Only one validator will be chosen at a time for a block to be added.

                * The amount of ETH staked was chosen as a validator based on probability.

            * POS committees: (128 committee members/attester)
            --------------------------------------------------

                * For every slot, there will be 1 proposer or validator (Randomly chosen to add blocks or transactions to the blockchain) and at least 128 committee members (they are also randomly chosen validators). So each of them also staked at least 32 ethers.

                * The job of committee members is to validate whether the transaction or block added by the proposer or validator is valid or malicious. Here, the majority required is 2/3 = 66% (committee members) in order to confirm a particular slot.

                * So, 1 validator is chosen at random from that queue each time, and 128 other validators are chosen at random for each slot for committee members to validate 1 transaction or add 1 block. The same thing happens for each slot, i.e., for 32 slots in one epoch.

                * Each slot will be 12 seconds long. The complete epoch is 6.4 minutes long. No empty slots are sent to blockchain.

                * BeaconChain will penalise the proposer if it is unable to add a transaction to the slot. Some of the staked Ethereum will be burned. Some of the 32 ethers will be consumed in the process.

                * If it commits fraud, a portion of the stake will be burned. (1%)

                * The Ethereum blockchain has a list of active validators. If any malicious activity found by a validator, ethereum ll remove it block chain network.

                * If a slot or block is added to the blockchain, the checkpoint will reverse it if any malicious transactions are discovered.

                * Every epoch's first slot is a checkpoint. It'll behave as an accepted or final version of blockchain. The last accepted state Based on the voting of committee members, that will roll back to the last checkpoint.

                * Epoch 0 + Slot 0 = Genesis Block. Every epoch is meant to reach finality. An epoch can have a maximum of <=32 slots. The role of epoch is to add checkpointing and more security to the blockchain.

                * Blocks are added to the blockchain in batches of 32. 1 slot = 1 block, and each block has its own set of transactions.

                * Each epoch's validator task is as follows:-> 1 slot:

                        * Randomly chosen to propose a new block.

                        * A committee member was chosen at random to cast a vote in order to approve the transaction.

                        * Committee members will run the transaction once again inside the slots to verify the signature of the transaction, i.e., the public key and private key. Once they verify the signature, they'll vote. (Match the signature with the proposer's signature.

        * Reward:-
        -----------

            * Base reward = validator effective balance * 2^6 / SQRT(Effective Bal. of all active validators).

            * Reward for POS: % of total staked Ethereum. Rewards will be given for each slot.

            * In one epoch, one can be either a proposer or an attester at any time. 1 task per epoch.You will be paid interest on the total amount of ether staked. There is no mining in POS. Whatever percentage of ether you receive as a reward will be added to the ether's circulation. Withdrawal of staked ether after 1.5 years.


    * Sharding in POS (also known as horizontal sharding): (Parallel blockchain: 15% faster transactions).

        * There is one beacon chain and 64 shard chains. Tasks will be divided among 64 shard chains. The beacon chain will be referenced by all shard chains. The beacon chain is able to read the data from each and every shard chain. The unique properties of shard chains will be stored in beacon chains in the form of hashes. Tasks are being assigned to the shred chain by the beacon chain.
 
 * Drawbacks of Ethereum:
---------------------------

        - Heavy network congestion , leads to high Gas cost.
        - Scalability issues i.e 13-15 TPS.
    Solution:
        - Layer 2 scaling solution. It uses POS Consensus. Certain Gas price whenever there is a state change. Also has Some network throughput.(TPS).
        - Layer 2 blockchain : They are of ERC20 type token. EVM compatible.

------------
* Polygon:
------------

    Polygon: Layer 2 solution.Offchian computation . Dencentralised.
        - Scalability issues solved. High throughpu (High TPS).
        - Enhance the capability of Ethereum.
        - Can achieve 10000 TPS.
        - Provide SDK. Mobile apps can build using this.
        - Matic js : to build Polygon apps using JS.
        - Polygon mainnet and mumbai testnet.

* Architecture of Polygon:
---------------------------

    - Polygon network divided into 3 Parts/Layers:
        1)- Ethereum Mainnet. / BeaconChain. It has: (All the SC that polygon is using)
                - Staking COntract , checkpoint contract and Reward Contract.
                ⮃
        2)- Heimdall (POS for Polygon) : <-(Polygon consensus layer).It contains POS mechanism. (2/3)
                ⮃
        3)- BOR layer. For adding new Blocks. (MATIC Chain = Native token for Polygon.)

    - By default,polygon network blocks are proposed in BOR layer then consensus ll happens in the POS mechanism in Heimdall layer and then it ll be sent to ethereum layer.

    - Polygon POS has different checkpoints. (1 block in BOR chain @ every 2 sec).

    - Every block ll be having a blockhash. (1 block has around 100-200 TXN)

    - Eg: 5 blocks producing different txn and connected to a checkpoint of POS polygon . Then the  block hashes of indivisual blocks ll combined to represent the merkel root hash for all block hashes.That 1 merkle root hash ll be posted to ethereum mainnet.So we ll have 1 hash to represent 600 transactions on mainnet.Finally after verifying the merkel root / txn, block ll be added to ethereum blockchain.Ethereum State ll only be changed by the final transaction by polygon not by indivisual blocks.

    - Verify a particular transaction exists or not using the merkel root.

    - BOR layer producing new blocks and keep adding them to Heildall layer on checkpoints.Checkpointing / snapshots of every blocks(Merkel Root) happens at every 10-20 minutes.i.e after every 20 min all proposed blocks added to Heildall layer on checkpoint.Validators from POS polygon choosen randomly to add these blocks from BOR networks.

    - Need of polygon is to do most of the work offchain without the ethereum blockchain.Just to validate summery of trx , it is using ethereum.

* Heildall Chain: (POS network , acting like BeaconChain)
-----------------

    - POS verification layer of polygon.it does the Checkpointing of BOR blocks/ Plasma blocks representation.  

    - Checkpointing: Sending the Merkel root to Ethereum blockchain. And the polygon Smart contract that deployed on ethereum has all the logic to verify this 3 layer system.

    - Staking contract is deloyed eth mainnet , it contains all the logic of how to propose new blocks, how to give voting rights to different validators, how to choose random validator and managing the checkpoints.Heimdall can make function call to staking SC on ETh blockchain.Polygon derives security from eth mainnet.

    - Aggregation of blocks produce by BOR.verify Indivisual block hash and block signature.Once validated , it combined the blocks to generate root hash.

    - Tendermint software need to install in order to become a validator.

    - For every few blocks, 1 valiadtor ll do certain tasks:
        - validate all blocks since last checkpoint.
        - creates a merkel tree of block hashes.
        - Final hash can be checkpointed and send to mainnet.
        - polygon  ll do 1-1 mapping with mainnet.

    ERC20 polygon <-> Eth mainnet.While mapping Equivalent amount of token that wanted to be added to mainnet, ll be burnt on polygon and then transfer to mainnet also viceversa.
    
    - Checkpoint importance/Task:

        - providing finality on root chain.
        - providing proof of burn in withdrawal assets.
        (how transfer of token happens in both chain). [ zkevm ]
    

    


 
 
 
